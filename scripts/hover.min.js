var hoverEffect=function(opts){var THREE=window.THREE,vertex="\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }\n  ",fragment="\n  varying vec2 vUv;\n  \n  uniform float dispFactor;\n  uniform sampler2D disp;\n  \n  uniform sampler2D texture1;\n  uniform sampler2D texture2;\n  uniform float angle1;\n  uniform float angle2;\n  uniform float intensity1;\n  uniform float intensity2;\n  \n  mat2 getRotM(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n  }\n  \n  void main() {\n    vec4 disp = texture2D(disp, vUv);\n    vec2 dispVec = vec2(disp.r, disp.g);\n    vec2 distortedPosition1 = vUv + getRotM(angle1) * dispVec * intensity1 * dispFactor;\n    vec2 distortedPosition2 = vUv + getRotM(angle2) * dispVec * intensity2 * (1.0 - dispFactor);\n    vec4 _texture1 = texture2D(texture1, distortedPosition1);\n    vec4 _texture2 = texture2D(texture2, distortedPosition2);\n    gl_FragColor = mix(_texture1, _texture2, dispFactor);\n  }\n  ";function firstDefined(){for(var i=0;i<arguments.length;i++)if(void 0!==arguments[i])return arguments[i]}var parent=opts.parent,dispImage=opts.displacementImage,image1=opts.image1,image2=opts.image2,intensity1=firstDefined(opts.intensity1,opts.intensity,1),intensity2=firstDefined(opts.intensity2,opts.intensity,1),commonAngle=firstDefined(opts.angle,Math.PI/4),angle1=firstDefined(opts.angle1,commonAngle),angle2=firstDefined(opts.angle2,3*-commonAngle),speedIn=firstDefined(opts.speedIn,opts.speed,1.6),speedOut=firstDefined(opts.speedOut,opts.speed,1.2),userHover=firstDefined(opts.hover,!0),easing=firstDefined(opts.easing,Expo.easeOut);if(parent)if(image1&&image2&&dispImage){var scene=new THREE.Scene,camera=new THREE.OrthographicCamera(parent.offsetWidth/-2,parent.offsetWidth/2,parent.offsetHeight/2,parent.offsetHeight/-2,1,1e3);camera.position.z=1;var renderer=new THREE.WebGLRenderer({antialias:!1,alpha:!0});renderer.setPixelRatio(window.devicePixelRatio),renderer.setClearColor(0,0),renderer.setSize(parent.offsetWidth,parent.offsetHeight),parent.appendChild(renderer.domElement);var render=function(){renderer.render(scene,camera)},loader=new THREE.TextureLoader;loader.crossOrigin="";var texture1=loader.load(image1,render),texture2=loader.load(image2,render),disp=loader.load(dispImage,render);disp.wrapS=disp.wrapT=THREE.RepeatWrapping,texture1.magFilter=texture2.magFilter=THREE.LinearFilter,texture1.minFilter=texture2.minFilter=THREE.LinearFilter;var mat=new THREE.ShaderMaterial({uniforms:{intensity1:{type:"f",value:intensity1},intensity2:{type:"f",value:intensity2},dispFactor:{type:"f",value:0},angle1:{type:"f",value:angle1},angle2:{type:"f",value:angle2},texture1:{type:"t",value:texture1},texture2:{type:"t",value:texture2},disp:{type:"t",value:disp}},vertexShader:vertex,fragmentShader:fragment,transparent:!0,opacity:1}),geometry=new THREE.PlaneBufferGeometry(parent.offsetWidth,parent.offsetHeight,1),object=new THREE.Mesh(geometry,mat);scene.add(object),userHover&&(parent.addEventListener("mouseenter",transitionIn),parent.addEventListener("touchstart",transitionIn),parent.addEventListener("mouseleave",transitionOut),parent.addEventListener("touchend",transitionOut)),window.addEventListener("resize",(function(e){renderer.setSize(parent.offsetWidth,parent.offsetHeight)})),this.next=transitionIn,this.previous=transitionOut}else console.warn("One or more images are missing");else console.warn("Parent missing");function transitionIn(){TweenMax.to(mat.uniforms.dispFactor,speedIn,{value:1,ease:easing,onUpdate:render,onComplete:render})}function transitionOut(){TweenMax.to(mat.uniforms.dispFactor,speedOut,{value:0,ease:easing,onUpdate:render,onComplete:render})}};